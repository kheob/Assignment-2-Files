import java.util.*;
/**
 * The main game class for the Lucky Vending Machine. Allows a user 
 * to set up a new player, guess a prize, view winnings, find the top
 * three players, display statistics for all players, and read 
 * game instructions.
 * 
 * @author Bai Chan Kheo 22262407
 * @version 1.5 27 May 2015
 */
public class Game
{
    private PlayerList players;
    private PrizeList prizes;
    private int currentPlayer; // Index of the current player.
    private static final String password = "FIT9131"; // Administrator password.
    
    /**
     * Constructor method for the Game class.
     */
    public Game()
    {
        players = new PlayerList();
        prizes = new PrizeList();
        currentPlayer = 0;
    }
    
    /**
     * Adds a new player to the list of all players. Only does so if
     * the name is unique and valid.
     */
    private void addPlayerPrompt()
    {
        Scanner console = new Scanner(System.in);
        System.out.println("----- [Set up a New Player] -----");
        System.out.println("Please enter your name:");
        String name = console.nextLine().trim();
        if (players.uniqueName(name))
        {
            if (players.addPlayer(name, 0, 0)) // Checks if the name is valid.
            {
                currentPlayer = players.getSize() - 1;
                System.out.println("Player created!\n");
            }
            // Already an else if invalid name in the PlayerList class.
        }
        else
            System.out.println("Name already exists. Please try another.\n");
    }
    
    /**
     * Reads a password from the user and checks if it matches.
     */
    private void checkPassword()
    {
        Scanner console = new Scanner(System.in);
        System.out.print("Administrator password: ");
        String newPassword = console.nextLine().trim();
        if (newPassword.equals(password))
        {
            System.out.println("Success!\n");
            prizes.displayMenu();
        }
        else
            System.out.println("Password is incorrect.\n");
    }
    
    /**
     * Compares the number given with a random lucky number. If they
     * match, the Player object will be updated with details of the
     * new Prize they have won.
     * 
     * @param guess     The number that is to be compared.
     */
    private void compareLuckyNumber(int guess)
    {
        System.out.println("You have guessed: " + guess);
        int randomNumber = LuckyGuessGenerator.generateRandomNumber(prizes.getSize());
        System.out.println("The lucky number is: " + randomNumber);
        if (guess == randomNumber)
        {
            players.getPlayer(currentPlayer).addPrize(prizes.getPrize(guess - 1));
            System.out.println("Congratulations! you have won a " +
                               prizes.getPrize(guess - 1).getName() + " worth $" +
                               prizes.getPrize(guess - 1).getWorth() + "!\n");
            players.getPlayer(currentPlayer).addWorth(prizes.getPrize(guess - 1).getWorth());
        }
        else
            System.out.println("Too bad! You didn't win anything.\n");
        players.getPlayer(currentPlayer).addSpent(prizes.getPrize(guess - 1).getCost());
    }
    
    /**
     * This method displays the in-game help menu. It includes a table
     * of all the prizes currently in the machine.
     */
    private void displayHelp()
    {
        System.out.println("----- [Display Game Help] -----\n" + 
                           "The objective of the Lucky Vending Machine game is for the\n" + 
                           "player to guess a number that corresponds to a prize. A\n" + 
                           "list of all the prizes available and its cost and worth is\n" + 
                           "shown below.\n");
        if (prizes.getSize() > 0)
            prizes.displayPrizes();
        else
            System.out.println("[No prizes currently in the system.]");
        System.out.println("\nIf the player's guess matches the number generated by the\n" +
                           "machine, they win the prize.\n\n" + 
                           "To begin, set up a new player with [1] and then guess with\n" + 
                           "[2].\n\n" + 
                           "If you are the administrator, type [0] in the main menu to\n" +
                           "access the prize configuration menu.");
    }
    
    /**
     * This method desplays the game menu for the Lucky Vending Machine game.
     */
    private void displayMenu()
    {
        System.out.println("----- [Welcome to the Lucky Vending Machine!] -----\n" + 
                           "Please Select from the Following Options:\n" +  
                           "[1] Set up a New Player\n" + 
                           "[2] Guess a Prize\n" + 
                           "[3] What Have I Won so Far?\n" + 
                           "[4] Who are the Top 3 Luckiest Players?\n" + 
                           "[5] Display All Players' Statistics\n" + 
                           "[6] Display Game Help\n" + 
                           "[7] Exit Game\n" + 
                           "[0] Administrator Options");
    }
    
    /**
     * Stops the Lucky Vending Machine game.
     */
    private void exitGame()
    {
        System.out.println("----- [Exit Game] -----");
        System.out.println("The game will now exit. Have a nice day.");
        players = new PlayerList(); // Deletes all players.
        prizes.writePrizes("prizes.txt"); // Writes all data from the PrizeList to a file.
    }
    
    /**
     * This method prompts the user for a guess, checks that it is
     * valid, and then compares it to a random lucky number. If both
     * numbers match, the Player wins the Prize.
     */
    private void guessPrize()
    {
        Scanner console = new Scanner(System.in);
        System.out.println("----- [Guess a Prize] -----\n" +
                           "Please guess a number between 1 and " + prizes.getSize() + ":");
        int guess = 0;
        while (!validGuess(guess))
        {
            System.out.print("> ");
            try
            {
                guess = console.nextInt();
                if (validGuess(guess))
                    compareLuckyNumber(guess);
                else
                    System.out.println("Error! Please guess a number between 1 and " + 
                                       prizes.getSize() + ":");
            }
            catch (Exception e)
            {
                System.out.println("Error! Invalid guess.\n");
                break;
            }
        }
    }
    
    /**
     * This method starts the Lucky Vending Machine. It will continue
     * to display the game menu to the player and prompt for input
     * until the player wishes to exit the game.
     */
    public void playGame()
    {
        String input = "";
        String exitValue = "7";
        Scanner console = new Scanner(System.in);
        while (!input.equals(exitValue))
        {
            displayMenu();
            System.out.print("> "); // Prompts for user input.
            input = console.nextLine();
            System.out.println(); // New line for readability.
            switch (input)
            {
                case "1":       addPlayerPrompt(); break;
                case "2":       if (players.getSize() > 0)
                                    guessPrize();
                                else
                                    System.out.println("No players set up.\n");
                                break;
                case "3":       if (players.getSize() > 0)
                                {
                                    System.out.println("----- [Player Information] -----");
                                    players.getPlayer(currentPlayer).displayPlayer();
                                }
                                else
                                    System.out.println("No players set up.\n");
                                break;
                case "4":       players.displayTop(); 
                                pressEnter(); break;
                case "5":       System.out.println("----- [Player Information] -----");
                                players.displayPlayers(); 
                                pressEnter(); break;
                case "6":       displayHelp();
                                pressEnter(); break;
                case "7":       exitGame(); break;
                case "0":       checkPassword(); break; // Prize Menu.
                default:        System.out.println("You have selected an invalid option.\n");
                                break;
            }
        }
    }
    
    /**
     * This method prompts the user to press the [ENTER] key to continue.
     */
    private void pressEnter()
    {
        Scanner console = new Scanner(System.in);
        System.out.println("\nPress [ENTER] to continue...");
        console.nextLine();
    }
    
    /**
     * This method checks that a guess is valid.
     * 
     * @param guess     The guess that needs to be validated.
     * @return          True if the guess is valid.
     */
    private boolean validGuess(int guess)
    {
        boolean isValid = false;
        if (guess >= 1 && guess <= prizes.getSize())
            isValid = true;
        return isValid;
    }
}